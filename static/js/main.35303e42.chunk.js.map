{"version":3,"sources":["logo.svg","Searchbar.js","ProfileCard.js","ReposFeed.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Searchbar","props","className","onSubmit","e","handleSubmit","htmlFor","type","id","name","placeholder","onChange","handleSearch","ProfileCard","src","avatar","alt","href","userUrl","login","numRepos","numFollowers","numFollowing","ReposFeed","repoItems","repos","map","repo","key","html_url","language","stargazers_count","forks_count","App","useState","setLogin","setName","setRepos","followers","setFollowers","following","setFollowing","setAvatar","setUserUrl","userInput","setUserInput","reposArray","setReposArray","notFound","setNotFound","SetData","public_repos","avatar_url","useEffect","fetch","then","res","json","data","repores","reposres","getReposArray","message","console","log","preventDefault","target","value","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.35303e42.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.06e73328.svg\";","import React from 'react'\r\n\r\nconst Searchbar = (props) => (\r\n  <form className='searchbar' onSubmit={(e) => props.handleSubmit(e)}>\r\n    <label htmlFor='header-search'>\r\n    </label>\r\n    <input \r\n      type='text'\r\n      id='header-search'\r\n      name='search'\r\n      placeholder='enter github user...'\r\n      onChange={(e) => props.handleSearch(e)}\r\n    />\r\n    <button className='searchbar__btn' type='submit'>search</button>\r\n  </form>\r\n)\r\n\r\nexport default Searchbar;","import React from 'react'\r\n\r\nconst ProfileCard = (props) => (\r\n  <div className='ProfileCard'>\r\n    <img src={props.avatar} alt='profile-picture' className='ProfileCard__img' />\r\n    <h2 className='ProfileCard__login'>\r\n      <a className='ProfileCard__link' href={props.userUrl}>@{props.login}</a>\r\n    </h2>\r\n    <h3 className='ProfileCard__name'>{props.name}</h3>\r\n    <p>{props.numRepos} repositories</p>\r\n    <div className='ProfileCard__followMetrics'>\r\n      <p>{props.numFollowers} followers</p>\r\n      <p>{props.numFollowing} following</p>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default ProfileCard;","import React from 'react'\r\n\r\nconst ReposFeed = (props) => {\r\n  const repoArray = props.repos\r\n  const repoItems = repoArray.map((repo) =>\r\n    <li key={repo.id}>\r\n      <h2><a href={repo.html_url} className='feed__link'>{repo.name}</a></h2>\r\n      <div className='feed__display'>\r\n        <p className='feed__displayItem'>Language: {repo.language}</p>\r\n        <p className='feed__displayItem'>Stars: {repo.stargazers_count}</p>\r\n        <p className='feed__displayItem'>Forks: {repo.forks_count}</p>\r\n      </div>\r\n    </li>\r\n  );\r\n\r\n  return (\r\n    <ul className='feed__repoList'>{repoItems}</ul>\r\n  )\r\n}\r\n\r\nexport default ReposFeed;","import logo from './logo.svg';\nimport React, { useState, useEffect } from 'react';\nimport Searchbar from './Searchbar.js';\nimport ProfileCard from './ProfileCard.js';\nimport ReposFeed from './ReposFeed.js';\nimport './App.css';\n\nfunction App() {\n  //State setting for React hooks\n  const [login, setLogin] = useState('username');\n  const [name, setName] = useState('name');\n  const [repos, setRepos] = useState(0);\n  const [followers, setFollowers] = useState(0);\n  const [following, setFollowing] = useState(0);\n  const [avatar, setAvatar] = useState('');\n  const [userUrl, setUserUrl] = useState('');\n  const [userInput, setUserInput] = useState('');\n  const [reposArray, setReposArray] = useState('');\n\n  //In case user DNE\n  const [notFound, setNotFound] = useState(null);\n\n  const SetData = ({login, public_repos, followers, following, avatar_url, name, html_url}) => {\n    setLogin(login);\n    setRepos(public_repos);\n    setFollowers(followers);\n    setFollowing(following);\n    setAvatar(avatar_url);\n    setUserUrl(html_url);\n    setName(name);\n  }\n\n  //set default as my profile because this makes the most sense to me\n  useEffect(() =>{\n    //for profile card\n    fetch('https://api.github.com/users/pigghead')\n      .then(res => res.json())\n      .then(data => {\n        SetData(data);\n      })\n    //for repository feed\n    fetch('https://api.github.com/users/pigghead/repos')\n      .then(repores=>repores.json())\n      .then(reposres => {\n        setReposArray(reposres);\n      })\n  }, []);\n\n  //use a state to determine which user we are searching for\n  const handleSearch = (e) => {\n    e.preventDefault();\n    setUserInput(e.target.value);\n  }\n\n  //fetch the user + their repo array\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    fetch(`https://api.github.com/users/${userInput}`)\n      .then(res => res.json())\n      .then(data => {\n        if(data.message) {\n          setNotFound(data.message)\n        } else {\n          SetData(data);\n          setNotFound(null);\n        }\n      });\n      getReposArray();\n  }\n\n  //fetching user repo array\n  const getReposArray = () => {\n    fetch(`https://api.github.com/users/${userInput}/repos`)\n      .then(res => res.json())\n      .then(repos => {\n        if(repos.message) {\n          setNotFound(repos.message)\n        } else {\n          setReposArray(repos);\n          setNotFound(null);\n        }\n      });\n      console.log(reposArray);\n  }\n\n  return (\n    <div>\n      <div className='header'>\n        <h2><a className='logo' href='./App.js'>GitHub API query</a></h2>\n        <Searchbar \n          handleSubmit={handleSubmit}\n          handleSearch={handleSearch}\n        />\n      </div>\n      {notFound ? (<h1 className='body'>No user found</h1>) : \n        (\n          <div className='body'>\n            <ProfileCard \n              login={login} \n              numRepos={repos} \n              numFollowers={followers} \n              numFollowing={following}\n              avatar={avatar}\n              userUrl={userUrl}\n              name={name}\n            />\n          </div>\n        )};\n      {reposArray.length == 0  || notFound ? (<h1>No repos found</h1>) : \n        (<ReposFeed \n          repos={reposArray}\n        />)};\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}